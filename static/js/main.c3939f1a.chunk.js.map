{"version":3,"sources":["components/MainAppBar.jsx","components/RestaurantCard.jsx","App.js","serviceWorker.js","index.js"],"names":["MainAppBar","classes","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","useStyles","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","maxWidth","media","height","paddingTop","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","avatar","backgroundColor","red","formControl","margin","minWidth","selectEmpty","marginTop","RestaurantCard","useState","expanded","setExpanded","handleExpandClick","setErrors","restaurants","setRestaurants","page","setPage","a","fetch","json","then","res","catch","err","filterByRate","rate","filter","restaurant","rating","useEffect","fetchData","name","setName","setRate","TextField","onChange","event","value","target","property","console","log","filterByName","id","label","FormControl","InputLabel","Select","labelId","MenuItem","index","pageStart","pageEnd","slice","getPage","map","i","Card","key","CardHeader","Avatar","action","subheader","contact","site","CardContent","component","address","street","city","state","CardActions","disableSpacing","clsx","onClick","aria-expanded","Pagination","count","Math","floor","length","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c3939f1a.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nfunction MainAppBar() {\n    const useStyles = makeStyles((theme) => ({\n        root: {\n          flexGrow: 1,\n        },\n        menuButton: {\n          marginRight: theme.spacing(2),\n        },\n        title: {\n          flexGrow: 1,\n        },\n      }));\n      const classes = useStyles();\n    return (\n        <div className={classes.root}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n              <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\" className={classes.title}>\n              Melp - Your best advisor\n            </Typography>\n            <Button color=\"inherit\">Login</Button>\n          </Toolbar>\n        </AppBar>\n      </div>\n    )\n}\n\nexport default MainAppBar\n","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport { red } from '@material-ui/core/colors';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport ShareIcon from '@material-ui/icons/Share';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport { Pagination } from '@material-ui/lab';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport '../App';\n\nconst PAGE_SIZE = 4;\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: 345,\n  },\n  media: {\n    height: 0,\n    paddingTop: '56.25%', // 16:9\n  },\n  expand: {\n    transform: 'rotate(0deg)',\n    marginLeft: 'auto',\n    transition: theme.transitions.create('transform', {\n      duration: theme.transitions.duration.shortest,\n    }),\n  },\n  expandOpen: {\n    transform: 'rotate(180deg)',\n  },\n  avatar: {\n    backgroundColor: red[500],\n  },\n\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));\nfunction RestaurantCard() {\n  const classes = useStyles();\n  const [expanded, setExpanded] = useState(false);\n  const handleExpandClick = () => {\n    setExpanded(!expanded);\n  };\n  const [hasError, setErrors] = useState(false);\n  const [restaurants, setRestaurants] = useState([]);\n\n  const [page, setPage] = useState(1);\n  const handleChange = (event, value) => {\n    setPage(value);\n  };\n\n  async function fetchData() {\n    const res = await fetch(\"https://recruiting-datasets.s3.us-east-2.amazonaws.com/data_melp.json\");\n    res\n      .json()\n      .then(res => setRestaurants(res))\n      .catch(err => setErrors(err));\n  }\n\n  useEffect(() => {\n    fetchData();\n  },\n  []\n  );\n\n\n  //console.log(restaurants)\n  \n  function getPage(page,rate,name){\n    const index = page-1\n    const pageStart = index*PAGE_SIZE\n    const pageEnd = index*PAGE_SIZE + PAGE_SIZE \n    return filterByRate(rate).slice(pageStart,pageEnd)\n   \n    \n  }\n  function filterByRate(rate){\n    if (rate === null ) {\n      return restaurants\n    }\n    return restaurants.filter(restaurant => restaurant.rating === rate);\n  }\n\n  function filterByName(name){\n    return restaurants.filter(restaurant => restaurant.name === name)\n  }\n\n\n  const [name,setName] = useState({\n    name:'Restaurante',\n  });\n  const [rate, setRate] = useState(null);\n\n  const handleChangeRate = (event) => {\n    setPage(1)\n    setRate(event.target.value);\n\n  };\n\n  const handleChangeName = event => {\n    let value = event.target.value\n    let property = event.target.name\n    console.log(value)\n    console.log(property)\n    filterByName(event.target.value)\n    setName(event.target.value);\n\n  };\n\n  return (\n    <div>\n      <div className={'search-box-container'}>\n  \n            <TextField \n              \n               onChange={handleChangeName}\n              name=\"name\"\n            id=\"standard-basic\" label=\"Restaurante\" />\n        <FormControl className={classes.formControl}>\n        <InputLabel id=\"demo-simple-select-label\">Rate</InputLabel>\n        <Select\n          labelId=\"demo-simple-select-label\"\n          id=\"demo-simple-select\"\n          value={rate}\n          onChange={handleChangeRate}\n        >\n          <MenuItem value={1}>⭐</MenuItem>\n          <MenuItem value={2}>⭐⭐</MenuItem>\n          <MenuItem value={3}>⭐⭐⭐</MenuItem>\n          <MenuItem value={4}>⭐⭐⭐⭐</MenuItem>\n          <MenuItem value={5}>⭐⭐⭐⭐⭐</MenuItem>\n          <MenuItem value ={null}>All</MenuItem>\n        </Select>\n      </FormControl>\n      </div>\n      <div className={'cards-container'}>\n        {\n         getPage(page,rate,name).map((restaurant, i) => (\n          <Card className={classes.root} key ={i}>\n          <span></span>\n            <CardHeader\n              avatar={\n                <Avatar aria-label=\"recipe\" className={classes.avatar}>\n                  R\n                </Avatar>\n              }\n              action={\n                <IconButton aria-label=\"settings\">\n                  <MoreVertIcon />\n                </IconButton>\n              }\n              title={restaurant.name}\n              subheader={restaurant.contact.site}\n            />\n            <CardContent>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                Dirección:<br></br>\n                {\n                  restaurant.address.street\n                }<br></br>\n                {\n                  restaurant.address.city\n                }<br></br>\n                {\n                  restaurant.address.state\n                }<br></br>\n              </Typography>\n            </CardContent>\n            <CardActions disableSpacing>\n              <IconButton aria-label=\"add to favorites\">\n                <FavoriteIcon />\n              </IconButton>\n              <IconButton aria-label=\"share\">\n                <ShareIcon />\n              </IconButton>\n              <IconButton\n                className={clsx(classes.expand, {\n                  [classes.expandOpen]: expanded,\n                })}\n                onClick={handleExpandClick}\n                aria-expanded={expanded}\n                aria-label=\"show more\"\n              >\n                \n              </IconButton>\n            </CardActions>\n          </Card>\n          ))\n        }\n      </div>\n      <div className={'pagination-container'}>\n      <Pagination count={Math.floor(filterByRate(rate).length/PAGE_SIZE)} color=\"primary\"  onChange = {handleChange}/>\n    \n      </div>\n    </div>\n    \n  );\n}\nexport default RestaurantCard","import React from 'react';\nimport './App.css';\nimport  MainAppBar  from \"./components/MainAppBar\";\nimport RestaurantCard from './components/RestaurantCard'\n\nfunction App() {\n  return (\n    <div>\n    <MainAppBar></MainAppBar>\n    <RestaurantCard></RestaurantCard>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}